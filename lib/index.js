// Generated by CoffeeScript 1.12.4
var VERBOSE, autoprefixer, fs, mapFilteredNodes, mapObj, postcss, postcss_bounce, precss, print, sugarss, util;

fs = require('fs');

util = require('util');

postcss = require('postcss');

precss = require('precss');

sugarss = require('sugarss');

autoprefixer = require('autoprefixer');

postcss_bounce = require('../../../postcss-bounce/src');

VERBOSE = process.env.METASERVE_VERBOSE != null;

print = function(o) {
  return console.log(util.inspect(o, {
    depth: null,
    colors: true
  }));
};

mapObj = function(o, f) {
  var mapped;
  mapped = {};
  Object.keys(o).forEach(function(k) {
    var v;
    v = o[k];
    if (typeof v === 'object') {
      return mapped[k] = mapObj(v, f);
    } else {
      return mapped[k] = f(v);
    }
  });
  return mapped;
};

mapFilteredNodes = function(root, filter, fn) {
  return root.nodes.map(function(node) {
    if (filter(node)) {
      fn(node);
    }
    if (node.nodes != null) {
      return node = mapFilteredNodes(node, filter, fn);
    }
  });
};

module.exports = {
  ext: 'sass',
  default_config: {
    content_type: 'text/css'
  },
  compile: function(filename, config, context, cb) {
    var source;
    if (VERBOSE) {
      console.log('[PostCSSCompiler.compile]', filename, config);
    }
    source = fs.readFileSync(filename).toString();
    console.log('source', source);
    return postcss([precss, postcss_bounce]).process(source, {
      parser: sugarss
    }).then(function(compiled) {
      compiled = compiled.content;
      return cb(null, {
        content_type: config.content_type,
        source: source,
        compiled: compiled
      });
    })["catch"](function(err) {
      console.log('faileure', err);
      return cb(err);
    });
  }
};
