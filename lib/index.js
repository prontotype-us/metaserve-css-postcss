// Generated by CoffeeScript 1.12.4
var VERBOSE, autoprefixer, fs, mapFilteredNodes, mapObj, path, postcss, postcss_advanced_variables, postcss_color_function, postcss_extend, precss, sugarss, util;

fs = require('fs');

util = require('util');

path = require('path');

postcss = require('postcss');

precss = require('precss');

sugarss = require('sugarss');

postcss_advanced_variables = require('postcss-advanced-variables');

postcss_color_function = require('postcss-color-function');

postcss_extend = require('postcss-extend');

autoprefixer = require('autoprefixer');

VERBOSE = process.env.METASERVE_VERBOSE != null;

mapObj = function(o, f) {
  var mapped;
  mapped = {};
  Object.keys(o).forEach(function(k) {
    var v;
    v = o[k];
    if (typeof v === 'object') {
      return mapped[k] = mapObj(v, f);
    } else {
      return mapped[k] = f(v);
    }
  });
  return mapped;
};

mapFilteredNodes = function(root, filter, fn) {
  return root.nodes.map(function(node) {
    if (filter(node)) {
      fn(node);
    }
    if (node.nodes != null) {
      return node = mapFilteredNodes(node, filter, fn);
    }
  });
};

module.exports = {
  ext: 'sass',
  default_config: {
    content_type: 'text/css'
  },
  compile: function(filename, config, context, cb) {
    var i, len, plugin, plugins, ref, ref1, source;
    if (VERBOSE) {
      console.log('[PostCSSCompiler.compile]', filename, config);
    }
    source = fs.readFileSync(filename).toString();
    plugins = [precss, postcss_advanced_variables, postcss_color_function, postcss_extend];
    if (config.plugins != null) {
      ref = config.plugins;
      for (i = 0, len = ref.length; i < len; i++) {
        plugin = ref[i];
        if ((ref1 = plugin[0]) !== '.' && ref1 !== '/') {
          plugin = './node_modules/' + plugin;
        }
        plugins.push(require(path.resolve(process.cwd(), plugin)));
      }
    }
    plugins.push(autoprefixer);
    return postcss(plugins).process(source, {
      parser: sugarss
    }).then(function(compiled) {
      compiled = compiled.content;
      return cb(null, {
        content_type: config.content_type,
        source: source,
        compiled: compiled
      });
    })["catch"](function(err) {
      return cb(err);
    });
  }
};
